<?php
/*
 * Copyright 2008 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

require_once("Zend/Json.php");
require_once("OpenSocialHttpRequest.php");
require_once("OpenSocialCollection.php");
require_once("OpenSocialPerson.php");

class OpenSocialClient {
  public $session_key;
  public $oauth_consumer_key;
  public $oauth_consumer_secret;

  /**
   * Create the client.
   * @param string $oauth_consumer_key 
   * @param string $oauth_consumer_secret 
   */
  public function OpenSocialClient($oauth_consumer_key, $oauth_consumer_secret, $session_key=null) {
    $this->session_key  = $session_key;
    $this->oauth_consumer_key      = $oauth_consumer_key;
    $this->oauth_consumer_secret   = $oauth_consumer_secret;
    $this->server_addr  = OpenSocial::get_container_url('sandbox');
  }

  /**
   * Returns the requested info fields for the requested set of users
   * @param array $uids an array of user ids
   * @param array $fields an array of strings describing the info fields desired
   * @return array of users
   */
  public function people_getUserInfo($guid, $fields = Array()) {
    $rest_endpoint = $this->server_addr . 'people/' . $guid . '/@self';
    $result = $this->rest_fetch($rest_endpoint, $fields);
    return OpenSocialPerson::parseJson($result);
  }

  public function people_getFriendsInfo($guid, $fields = Array()) {
    $rest_endpoint = $this->server_addr . 'people/' . $guid . '/@friends';
    $result = $this->rest_fetch($rest_endpoint, $fields);
    return OpenSocialPerson::parseJsonCollection($result);
  }

  public function people_getAllInfo($guid, $fields = Array()) {
    $rest_endpoint = $this->server_addr . 'people/' . $guid . '/@all';
    return $this->rest_fetch($rest_endpoint, $fields);
  }

  public function people_getGroupFriends($guid, $group_id, $fields = Array()) {
    $rest_endpoint = $this->server_addr . 'people/' . $guid . '/' . $group_id;
    return $this->rest_fetch($rest_endpoint, $fields);
  }

  public function people_getMyInfo($fields = Array()) {
    $rest_endpoint = $this->server_addr . '@me/' . '@self';
    return $this->rest_fetch($rest_endpoint, $fields);
  }

  public function people_getFriendInfo($guid, $fid, $fields = Array()) {
    $rest_endpoint = $this->server_addr . 'people/' . $guid . '/@all/' . $fid;
    $result = $this->rest_fetch($rest_endpoint, $fields);
    return OpenSocialPerson::parseJsonCollection($result);
  }

  // get groups associated with a user
  public function group_getUserGroups($guid, $group_id = 1, $fields = Array()) {
    $rest_endpoint = $this->server_addr . 'group/' . $guid . '/' . $group_id;
    return $this->rest_fetch($rest_endpoint, $fields);
  }

  // get activities generated by a user
  public function activity_getUserActivity($guid, $fields = Array()) {
    $rest_endpoint = $this->server_addr . 'activity/' . $guid . '@self';
    return $this->rest_fetch($rest_endpoint, $fields);
  }

  // get activities generated by a user
  public function activity_getFriendActivity($guid, $fields = Array()) {
    $rest_endpoint = $this->server_addr . 'activity/' . $guid . '@friends';
    return $this->rest_fetch($rest_endpoint, $fields);
  }

  // get app data of a user guid for app given by appid
  public function appdata_getUserAppData($guid, $appid, $fields = Array()) {
    $rest_endpoint = $this->server_addr . 'appdata/@me/@self/@app'; // . $appid;
    return $this->rest_fetch($rest_endpoint, $fields);
  }

  // get app data of friends of a user guid for app given by appid
  public function appdata_getFriendsAppData($guid, $appid, $fields = Array()) {
    $rest_endpoint = $this->server_addr . 'appdata/' . $guid . '@friends/' . $appid;
    return $this->rest_fetch($rest_endpoint, $fields);
  }

  /* utility */

  public function rest_fetch($endpoint, $params) {

    global $error_codes;

    $httplib = new OpenSocialHttpLib($this->server_addr, $this->oauth_consumer_key, $this->oauth_consumer_secret);
    $json_result = $httplib->send_request($endpoint, $params);

    // json_encode is supported after PHP 5.2.0 so for simplicity Zend library is included and used
    // $result = json_decode($json_result, true);
    $result = Zend_Json::decode($json_result);
   
    return $result;
  }

  // RPC functions

  public function rpcGetMyInfo() {
    $rpc_endpoint = "http://sandbox.orkut.com/social/rpc";
    return $this->rpc_fetch($rpc_endpoint, "");
  }

  public function rpc_fetch($rpc_endpoint, $json_body) {

    $httplib = new OpenSocialHttpLib($this->server_addr, $this->oauth_consumer_key, $this->oauth_consumer_secret);
    $json_array['method'] = 'people.get';
    $json_array['id'] = 'myself';
    $json_array['params']['userid'] = '@me';
    $json_array['params']['groupid'] = '@self';

    $json_body = Zend_Json::encode($json_array );
    
    $result = $httplib->send_rpc_request($rpc_endpoint, $json_body);

    return $result;
  }

}

class OpenSocialClientException extends Exception {
}

/**
 * Error codes and descriptions for the OpenSocial API.
 */

class OpenSocialAPIErrorCodes {

  const OS_ERROR_SUCCESS = 0;

  /*
   * GENERAL ERRORS
   */
  const OS_ERROR_UNKNOWN = 1;
  const OS_ERROR_SERVICE = 2;
  const OS_ERROR_METHOD = 3;
}

$filter_array = array(
    "familyName" => 0,
    "givenName" => 0,
    "thumbnailUrl" => 0
);

$error_codes = array(
    "Error 401",
    "Error 501"
);

?>
